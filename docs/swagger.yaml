definitions:
  dto.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: "12345678"
        maxLength: 16
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.SignUpRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: "12345678"
        maxLength: 16
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.SignUpResponse:
    properties:
      message:
        example: Sign Up successfully.!
        type: string
      token:
        $ref: '#/definitions/dto.TokenResponse'
    type: object
  dto.TokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  dto.UploadFileResponse:
    properties:
      fileName:
        example: asdasdadsd2.png
        type: string
      fileUrl:
        example: http://localhost:8080/v1/file/serve/fileName
        type: string
      size:
        type: integer
    type: object
  dto.UserInfo:
    properties:
      avatar:
        example: http://localhost:8080/v1/file/serve/fileName
        type: string
      email:
        example: user@example.com
        type: string
      id:
        example: 2
        type: integer
    type: object
  errs.AppError:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
info:
  contact: {}
  description: Gin APIs
  version: "1.0"
paths:
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return JWT token
      parameters:
      - description: Login Request
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.AppError'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/errs.AppError'
      summary: Login
      tags:
      - Auth
  /v1/auth/sign-up:
    post:
      consumes:
      - application/json
      description: Register a new user and return JWT token
      parameters:
      - description: Sign Up Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.SignUpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SignUpResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.AppError'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/errs.AppError'
      summary: Sign Up
      tags:
      - Auth
  /v1/file/serve/{fileName}:
    get:
      consumes:
      - application/json
      description: Get a file by file name
      parameters:
      - description: File name to serve
        in: path
        name: fileName
        required: true
        type: string
      produces:
      - application/*
      responses:
        "200":
          description: File served successfully
          schema:
            type: file
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.AppError'
      security:
      - BearerToken: []
      summary: Get File
      tags:
      - File
  /v1/file/upload:
    post:
      consumes:
      - application/json
      description: Upload file
      parameters:
      - description: File Upload Request
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UploadFileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errs.AppError'
      summary: Upload file
      tags:
      - File
  /v1/user/me:
    get:
      consumes:
      - application/json
      description: Get user info From JWT token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errs.AppError'
      summary: User info
      tags:
      - User
securityDefinitions:
  BearerToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
